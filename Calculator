#include <iostream>
#include <stack>
#include <string>
#include <cctype>
#include <sstream> 

using namespace std;

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

string infixToPostfix(const string& infix) {
    string postfix;
    stack<char> operatorStack;

    for (size_t i = 0; i < infix.length(); i++) {
        char c = infix[i];

        if (isdigit(c)) {
            while (i < infix.length() && isdigit(infix[i])) {
                postfix += infix[i];
                i++;
            }
            i--;
            postfix += ' ';
        }
        else if (c == '(') {
            operatorStack.push(c);
        }
        else if (c == ')') {
            while (!operatorStack.empty() && operatorStack.top() != '(') {
                postfix += operatorStack.top();
                operatorStack.pop();
            }
            operatorStack.pop();
        }
        else {
            while (!operatorStack.empty() && precedence(c) <= precedence(operatorStack.top())) {
                postfix += operatorStack.top();
                operatorStack.pop();
            }
            operatorStack.push(c);
        }
    }

    while (!operatorStack.empty()) {
        postfix += operatorStack.top();
        operatorStack.pop();
    }

    return postfix;
}

int evaluatePostfix(const string& postfix) {
    stack<int> operandStack;
    istringstream ss(postfix); // Use istringstream instead of stringstream

    while (!ss.eof()) {
        string token;
        ss >> token;

        if (isdigit(token[0])) {
            operandStack.push(stoi(token));
        }
        else if (token.length() == 1 && (token[0] == '+' || token[0] == '-' || token[0] == '*' || token[0] == '/')) {
            int operand2 = operandStack.top();
            operandStack.pop();
            int operand1 = operandStack.top();
            operandStack.pop();

            if (token[0] == '+') operandStack.push(operand1 + operand2);
            else if (token[0] == '-') operandStack.push(operand1 - operand2);
            else if (token[0] == '*') operandStack.push(operand1 * operand2);
            else if (token[0] == '/') operandStack.push(operand1 / operand2);
        }
    }

    return operandStack.top();
}

int main() {
    string infixExpression;
    cout << "Enter an infix expression: ";
    getline(cin, infixExpression);

    string postfixExpression = infixToPostfix(infixExpression);
    cout << "Postfix expression: " << postfixExpression << endl;

    int result = evaluatePostfix(postfixExpression);
    cout << "Result: " << result << endl;

    return 0;
}
