#include <iostream>
#include <windows.h>
#include <sstream>
#include <string>

using namespace std;

void gotoxy(int x, int y) {
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
	
class MyStack {
public:
    MyStack() : top(-1) {}

    void push(double value) {
        if (top < MaxSize - 1) {
            stack[++top] = value;
        } else {
            cerr << "Stack overflow" << endl;
        }
    }

    double pop() {
        if (top >= 0) {
            return stack[top--];
        } else {
            cerr << "Stack underflow" << endl;
            return 0;
        }
    }

    double peek() const {
        if (top >= 0) {
            return stack[top];
        } else {
            cerr << "Stack is empty" << endl;
            return 0;
        }
    }

    bool isEmpty() const {
        return top == -1;
    }

private:
    static const int MaxSize = 100;
    double stack[MaxSize];
    int top;
};

int getPrecedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    if (op == '*' || op == '/')
        return 2;
    return 0;
    
}
    void display() {
        // Box drawing characters
        char topLeft = 201;
        char topRight = 187;
        char bottomLeft = 200;
        char bottomRight = 188;
        char horizontal = 205;
        char vertical = 186;

        // Set the position for the box
        int x = 5;
        int y = 5;
        int width = 60; 
        int height = 13;

        // Draw the box
        gotoxy(x, y);
        cout << topLeft;
        gotoxy(x + width, y);
        cout << topRight;
        gotoxy(x, y + height);
        cout << bottomLeft;
        gotoxy(x + width, y + height);
        cout << bottomRight;

        for (int i = x + 1; i < x + width; i++) {
            gotoxy(i, y);
            cout << horizontal;
            gotoxy(i, y + height);
            cout << horizontal;
        }

        for (int i = y + 1; i < y + height; i++) {
            gotoxy(x, i);
            cout << vertical;
            gotoxy(x + width, i);
            cout << vertical;
        }

        // Set the position for the text and queue display
        int textX = x + 2;
        int textY = y + 1;

        // Clear the area inside the box
        for (int i = 0; i < height - 2; i++) {
            gotoxy(textX, textY + i);
            cout << "                                           ";
        }
	}
string infixToPostfix(const string& infix) {
    string postfix;
    MyStack operatorStack;

    for (size_t i = 0; i < infix.size(); ++i) {
        char c = infix[i];
        
        if (isdigit(c) || c == '.') {
            string number;
            while (i < infix.size() && (isdigit(infix[i]) || infix[i] == '.')) {
                number += infix[i];
                i++;
            }
            i--;
            postfix += number + " ";
        } else if (c == '(') {
            operatorStack.push(c);
        } else if (c == ')') {
            while (!operatorStack.isEmpty() && operatorStack.peek() != '(') {
                postfix += operatorStack.pop();
                postfix += ' ';
            }
            if (!operatorStack.isEmpty() && operatorStack.peek() == '(')
                operatorStack.pop();
        } else {
            while (!operatorStack.isEmpty() && getPrecedence(c) <= getPrecedence(operatorStack.peek())) {
                postfix += operatorStack.pop();
                postfix += ' ';
            }
            operatorStack.push(c);
        }
    }

    while (!operatorStack.isEmpty()) {
        postfix += operatorStack.pop();
        postfix += ' ';
    }

    return postfix;
}

double evaluatePostfix(const string& postfix) {
    MyStack valueStack;
    istringstream stream(postfix);

    string token;
    while (stream >> token) {
        if (isdigit(token[0]) || (token[0] == '-' && isdigit(token[1]))) {
            double value = stod(token);
            valueStack.push(value);
        } else {
            double operand2 = valueStack.pop();
            double operand1 = valueStack.pop();
            switch (token[0]) {
                case '+':
                    valueStack.push(operand1 + operand2);
                    break;
                case '-':
                    valueStack.push(operand1 - operand2);
                    break;
                case '*':
                    valueStack.push(operand1 * operand2);
                    break;
                case '/':
                    if (operand2 != 0) {
                        valueStack.push(operand1 / operand2);
                    } else {
                        cerr << "Division by zero" << endl;
                        return 0;
                    }
                    break;
            }
        }
    }
    return valueStack.pop();
}

int main() {
	display();
    string infix;
    gotoxy(9,10);
    cout << "Enter an infix expression: ";
    getline(cin, infix);
	gotoxy(9,11);
    string postfix = infixToPostfix(infix);
    cout << "Postfix notation: " << postfix << endl;
	gotoxy(9,12);
    double result = evaluatePostfix(postfix);
    cout << "Result: " << result << endl;

    return 0;
}
